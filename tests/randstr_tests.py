import unittest
import string
import sys
import os

sys.path.insert(0, os.path.abspath('../sealant/randstr'))  # Ughh
from randstr import RandomString
from randstr_terminal import RandstrParser


class RandomStringGeneration(unittest.TestCase):
    """Tests for RandomString class methods"""

    def test_generated_length(self):
        """String generated by providing only required arguments"""
        string_generator = RandomString(length=20)
        self.assertEqual(20, len(string_generator()))

    def test_default_char_set(self):
        """Verify correct default character set used"""
        char_set = ("abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVW"
                    "XYZ0123456789!\"#$%&\'()*+,-./:;<=>?@[\]^_`{|}~ ")

        self.assertEqual(RandomString().default_char_set, char_set)

    def test_char_set_override(self):
        """Verify user provided character set sticks"""
        char_set = "abcDEF123,.;"
        randstr_obj = RandomString(user_char_set=char_set)

        self.assertEqual(char_set, randstr_obj.char_set)

    def test_user_char_set_generation(self):
        """Verify only user_char_set characters are used for random string
        generation"""

        char_set = "abcDEF123,.;"
        for char_len in range(10, 101, 10):
            return_str = RandomString(
                length=char_len, user_char_set=char_set).generate_random_string()

            with self.subTest(return_str=return_str, char_set=char_set):
                self.assertTrue(set(char_set).issuperset(set(return_str)))

    def test_character_shuffle(self):
        """Tests that character set is shuffled when shuffle=True argument
        provided to RandomString()"""

        string_generator = RandomString(length=50)
        string_generator.shuffle_characters()

        unshuffled_set = string_generator.default_char_set
        shuffled_set = string_generator.char_set

        self.assertNotEqual(unshuffled_set, shuffled_set)

    def test_undefined_length(self):
        """Test that value of None is returned when no length is provided to
        RandomString()"""

        string_generator = RandomString()
        self.assertIsNone(string_generator())


if __name__ == '__main__':
    unittest.main()
